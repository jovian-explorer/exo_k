workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG


stages:
  - setup
  - tests
  - tutorials
  - build
  - dependencies
  - deploy


default:
  image: python:3.9.13
  cache:
    - key:
        files:
          - poetry.lock
      paths:
        - .cache/pip
        - .venv
      policy: pull
  interruptible: true
  before_script:
    - pip install poetry==1.2.0b2
    - poetry config virtualenvs.in-project true
    - if [ -z ${CI_COMMIT_TAG+x} ]; then echo ""; else poetry self add poetry-dynamic-versioning-plugin; fi
    - poetry install -vv


include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

# Template
.build_tutorial:
  stage: tutorials
  script:
    - apt-get update && apt-get install -y git-lfs && git lfs install
    - git clone https://forge.oasu.u-bordeaux.fr/amechineau/pytmosph3r-data --depth=1 --branch minimal --single-branch data
    - mkdir ci_notebooks
    - cd tutorials
    - poetry run papermill  --request-save-on-cell-execute
      --progress-bar $NB_FILENAME ../ci_notebooks/$NB_FILENAME
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - ci_notebooks/*.ipynb
    expire_in: 1 days

.publish_package:
  stage: deploy
  dependencies:
    - packages
  script:
    - poetry config repositories.$PYPI_REPO_NAME "$PYPI_REPO_URL"
    - poetry config http-basic.gitlab "$PYPI_REPO_USER" "$PYPI_REPO_TOKEN"
    - poetry publish --repository "$PYPI_REPO_NAME"
  rules:
    - if: $CI_COMMIT_BRANCH == 'public' && $CI_COMMIT_TAG != null


variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"


# CI
warm-🐍:
  stage: setup
  cache:
    key:
      files:
        - poetry.lock
    paths:
      - .cache/pip
      - .venv
    policy: pull-push
    when: 'on_success'
  before_script: [ ]
  script:
    - pip install poetry==1.2.0b2
    - poetry config virtualenvs.in-project true
    - poetry install --no-root
    - poetry install --no-root --sync
    - poetry export --format requirements.txt --output requirements.txt
  artifacts:
    paths:
      - requirements.txt
  rules:
    - changes:
        - poetry.lock


test:
  stage: tests
  script:
    - poetry run pytest -vv --cov --cov-report=xml --cov-branch --junitxml=report.xml
  artifacts:
    paths:
      - coverage.xml
      - report.xml
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


tutorials:
  extends:
    - .build_tutorial
  parallel:
    matrix:
      - NB_FILENAME:
          - tutorial-exo_k.ipynb
          - examples-exo_k.ipynb
          - tutorial-atm.ipynb


packages:
  stage: build
  script:
    - poetry build
  artifacts:
    paths:
      - dist/
  rules:
    - if: $CI_COMMIT_TAG != null

doc:
  stage: build
  dependencies:
    - tutorials
  script:
    - apt-get update && apt-get install -y pandoc
    - cp ci_notebooks/*.ipynb tutorials/
    - cd doc && poetry run make && cd ..
    - mkdir site
    - shopt -s dotglob; mv doc/_build/html/* site
  artifacts:
    paths:
      - site/
  rules:
    - if: $CI_COMMIT_TAG != null


dependency_scanning:
  stage: dependencies
  before_script: [ ]

requirements:
  stage: dependencies
  script:
    - poetry run pip freeze > requirements.txt
  artifacts:
    paths:
      - requirements.txt
  rules:
    - if: $CI_COMMIT_TAG != null


Gitlab:
  extends:
    - .publish_package
  variables:
    PYPI_REPO_NAME: gitlab
    PYPI_REPO_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
    PYPI_REPO_USER: gitlab-ci-token
    PYPI_REPO_TOKEN: $CI_JOB_TOKEN
